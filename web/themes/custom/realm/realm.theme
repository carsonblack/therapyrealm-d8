<?php

/**
 * Implements hook_preprocess_breadcrumb().
 */
function realm_preprocess_breadcrumb(&$variables) {
  // Set the cache tag.
  $variables['#cache']['contexts'][] = 'url.path';

  // Get the page title and add to the end of the breadcrumb.
  $request = \Drupal::request();
  $route = \Drupal::routeMatch()->getRouteObject();
  $page_title = \Drupal::service('title_resolver')
    ->getTitle($request, $route);

  $variables['breadcrumb'][] = array(
    'text' => $page_title
  );
}

/**
 * @param $variables
 *
 * Implements template_preprocess_block().
 */
function realm_preprocess_block(&$variables) {
  if ($variables["plugin_id"] == 'system_messages_block' ||
      $variables["plugin_id"] == 'local_tasks_block' ||
      $variables["plugin_id"] == 'system_main_block'
  ) {
    // Add container class for all blocks
    $variables["attributes"]["class"][] = 'container';
    // Add a 20px padding to top of all blocks
    $variables["attributes"]["class"][] = 'g-py-20';
  }
}

/**
 * Implements template_preprocess_status_messages().
 */
function realm_preprocess_status_messages(&$variables) {
  $variables["attributes"]["class"][] = 'container g-my-20 g-pa-20 alert alert-dismissible fade show  rounded-0';
  if (isset($variables["message_list"]["status"][0])) {
    $variables["attributes"]["class"][] = 'g-bg-teal g-color-white';
  }

  if (isset($variables["message_list"]["warning"][0])) {
    $variables["attributes"]["class"][] = 'g-bg-yellow';
  }

  if (isset($variables["message_list"]["error"][0])) {
    $variables["attributes"]["class"][] = 'g-bg-red g-color-white';
  }
}

/**
 * @param $variables
 *
 * Implements template_preprocess_node().
 */
function realm_preprocess_node(&$variables) {
  if (isset($variables["attributes"]["class"])) {
    $variables["attributes"]["class"][] = 'container g-pt-20';
  }
}

/**
 * @param $variables
 *
 * Implements template_preprocess_webform().
 */
function realm_preprocess_webform (&$variables) {
  $variables["attributes"]["class"][] = 'g-brd-around g-brd-gray-light-v4 g-pa-30 g-mb-30';
}

/**
 * @param $variables
 *
 * Implements template_preprocess_form_element().
 */
function realm_preprocess_form_element (&$variables) {
  if ($variables["type"] != "password" &&
    $variables["type"] != "stripe"
  ) {
    $variables["attributes"]["class"][] = 'form-group row g-mb-25';
  }

  if ($variables["type"] == "password") {
    $variables["attributes"]["class"][] = 'col-sm-9 offset-sm-3';
  }
}

/**
 * @param $variables
 *
 * Implements template_preprocess_stripe_element().
 */
function realm_preprocess_stripe_element (&$variables) {
  $variables["classes"] = 'g-mt-30 g-mb-30 form-control-md';
}


/**
 * @param $variables
 *
 * Implements template_preprocess_form_element_label().
 */
function realm_preprocess_form_element_label (&$variables) {
  $variables["attributes"]["class"][] = 'col-sm-3 col-form-label g-mb-10';
}

/**
 * @param $variables
 *
 * Implements template_preprocess_input().
 */
function realm_preprocess_input (&$variables) {
  if ($variables["element"]["#type"] == "submit") {
    $variables["attributes"]["class"][] = 'btn btn-md u-btn-primary g-mr-10 g-mb-15';
  }
  else {
    $variables["wrapper_classes"] = 'col-sm-9';
    $variables["attributes"]["class"][] = 'form-control u-form-control rounded-0';
  }

  if ($variables["element"]["#type"] == "checkbox") {
    $variables["attributes"]["class"][] = 'g-hidden-xs-up g-pos-abs g-top-0 g-left-0';
  }
}

/**
 * Implements template_preprocess_checkboxes().
 */
function realm_preprocess_checkboxes (&$variables) {
  if (isset($variables["element"]["#options"])) {
    // If there are a lot of checkboxes group them up so they can be put
    // into columns.
    $number_of_options = count($variables["element"]["#options"]);
    if ($number_of_options > 3) {
      $options_per_column = round(($number_of_options / 3), 0, PHP_ROUND_HALF_UP) + 1;
      $child_groups = [];
      $child_group_count = 0;
      for ($option_count = 1; $option_count <= $number_of_options; $option_count++) {
        if ($option_count % $options_per_column == 0) {
          $child_group_count++;
        }
        $child_groups[$child_group_count][] = $variables["element"][$option_count];
      }
      $variables['child_groups'] = $child_groups;
    }
  }
}

/**
 * Implements template_preprocess_menu_local_tasks().
 */
function realm_preprocess_menu_local_tasks (&$variables) {
  $variables["attributes"]["class"][] = 'nav nav-justified u-nav-v4-1 u-nav-primary';
}

/**
 * Implements template_preprocess_menu_local_task().
 */
function realm_preprocess_menu_local_task (&$variables) {
  $variables["attributes"]["class"][] = 'nav-item';

  $variables["link"]["#attributes"]["class"][] = 'nav-link';
  if (isset($variables["is_active"])) {
    $variables["link"]["#attributes"]["class"][] = 'active';
  }

}

function realm_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    $pattern = 'block__' . $variables['elements']['content']['#block_content']->bundle();

    // Add the suggestion after normal block suggestions but before single
    // specific id suggestions
    array_splice($suggestions, 2, 0, $pattern);
  }
}
